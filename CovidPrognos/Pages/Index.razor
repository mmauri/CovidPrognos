@page "/"
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject DialogService dialogService
@inject NotificationService notificationService
@inject IStringLocalizer<App> Localize

@using Models


    <div class="row">
        <div class="col-8 text-left">
            <h4>RIM Score NPR</h4>
            <p>
                @Localize["For PCR positive patients"]
            </p>
        </div>
        <div class="col-4 text-right">
            <RadzenButton Text=@Localize["Add"] ButtonStyle="ButtonStyle.Primary" Click="@AddPatient" />
        </div>
    </div>

    @*Todo change Grid to DataList if it is running on a mobile device*@
    <RadzenDataGrid @ref="grid" Data="@patients" TItem="Patient" AllowSorting="true" 
        RowSelect="@((args) => OnPatientRowSelected(args))">
        <Columns>
            <RadzenDataGridColumn  TItem="Patient" Property="Name" Title=@Localize["Patient"] />
        
            <RadzenDataGridColumn  TItem="Patient" Property="AdmissionDate" Title=@Localize["Admission date"] >
                <Template Context="item">
                    @item.AdmissionDate.ToShortDateString()
                </Template>
            </RadzenDataGridColumn >
            <RadzenDataGridColumn  TItem="Patient" Property="Age" Title=@Localize["Age"] TextAlign="TextAlign.Right" />
        
            <RadzenDataGridColumn  TItem="Patient" Property="Score" Title=@Localize["Risk score"] TextAlign="TextAlign.Right">
                <Template Context="data">
                    @if (data.NPRScore < 50)
                    {
                        <span>@data.NPRScore %</span>
                    }
                    else
                    {
                        <span style='color:red'>@data.NPRScore %</span>
                    }
                </Template>
            </RadzenDataGridColumn >
        </Columns>
    </RadzenDataGrid>


@code {
    List<Patient> patients = new List<Patient>();

    bool addingPatient = false;
    RadzenDataGrid<Patient> grid;

    //BUG: Blazor WASM cannot debug on the first component Initialized event
    protected override async Task OnInitializedAsync()
    {
        LoadData();
        await ShowDisclaimer();
    }

    void LoadData()
    {
        string patientKey;
        Patient patient;

        try
        {
            var length = localStorage.Length();
            if (length == 0) return;

            //localStorage sync access is faster
            for (var i = 0; i < length; i++)
            {
                patientKey = localStorage.Key(i);
                try
                {
                    patient = localStorage.GetItem<Patient>(patientKey);
                    patients.Add(patient);
                }
                catch { }
            }

            //grid.Reload();
        }
        catch(Exception ex)
        {
            notificationService.Notify(NotificationSeverity.Error, "Error", ex.Message);
        }
    }

    async Task AddPatient()
    {
        addingPatient = true;
        var id = patients.Count + 1;
        var patient = new Patient();
        patient.Id = id;
        patient.AdmissionDate = DateTime.Now;
        await OnPatientRowSelected(patient);
    }
    async Task ShowDisclaimer()
    {
        await dialogService.OpenAsync<RIMScoreDisclaimer>("RIM Score disclaimer");
    }

    async Task OnPatientRowSelected(Patient patient)
    {
        var res = await dialogService.OpenAsync<PatientEdit>(@Localize["Edit"],
                                        new Dictionary<string, object>()
                                        {
                                            { "Patient", patient }
                                        });
        if (res == "Delete")
        {
            DeletePatient(patient);

            return;
        }


        //save & update list
        var score = CalcNPRScore(patient);
        patient.NPRScore = score;
        if (addingPatient)
        {
            patients.Add(patient);
            addingPatient = false;
            await grid.Reload();
        }
        UpdatePatient(patient);

        var notification = new NotificationMessage()
        {
            Severity = score < 50 ? NotificationSeverity.Success : NotificationSeverity.Error,
            Summary = "NPR RIMScore",
            Detail = $"Score: {score}%",
            Duration = 8000 //8 secs
        };
        notificationService.Notify(notification);

    }


    int CalcNPRScore(Patient patient)
    {
        int sexValue = patient.IsMale == true ? 1 : 0;
        int o2satValue = patient.SaO2Below90PercAtAdmission == true ? 1 : 0;
        double npr = (double) patient.Neutrophils / patient.Platelets;
        int nprRatioAbove3 = npr > 0.03 ? 1 : 0;
        int crpAbove112mgl = patient.CRPGreater112mglAtAdmission == true ? 1 : 0;

        double y = -10.6923 + 0.1006 * (int)patient.Age + 0.5669 * sexValue + 1.0410 * o2satValue + 0.7774 * nprRatioAbove3 + 0.7744 * crpAbove112mgl;

        double score = 1 / (1 + Math.Exp(-y));

        int scoreInt = (int)Math.Round(score * 100, 0);

        return scoreInt;

    }

    void DeletePatient(Patient patient)
    {
        patients.Remove(patient);
        localStorage.RemoveItem(patient.Id.ToString());
        grid.Reload();

    }

    void UpdatePatient(Patient patient)
    {
        localStorage.SetItem<Patient>(patient.Id.ToString(), patient);

    }
}